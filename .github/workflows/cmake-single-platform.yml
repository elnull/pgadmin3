# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install libxslt
      run: |
            sudo apt-get update
            sudo apt-get install -y libxslt-dev
    - name: Install xmll2
      run: |
            sudo apt-get update
            sudo apt-get install -y libxml2-utils
    - name: Fix permissions on files and directories
    - name: Install PostgreSQL client
      run: |
           sudo apt-get update
           apt-get install -y postgresql-client
    - name: Install wxWidgets
      run: |
           sudo apt-get update
           sudo apt-get install libwxbase3.2-0-unofficial && sudo apt-get install libwxbase3.2-dev && sudo apt-get install libwxgtk3.2-0-unofficial && sudo apt-get install libwxgtk3.2-dev && sudo apt-get install wx3.2-headers && sudo apt-get install wx-common && sudo apt-get install libwxgtk-webview3.2-0-unofficial && sudo apt-get install libwxgtk-webview3.2-dev && sudo apt-get install libwxbase3.1-0-unofficial-dbg && sudo apt-get install libwxgtk-webview3.2-0-unofficial-dbg && sudo apt-get install libwxgtk-media3.2-0-unofficial-dbg && sudo apt-get install wx3.2-i18n
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

